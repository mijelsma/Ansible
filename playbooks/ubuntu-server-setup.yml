---
- name: Ubuntu Server Initial Setup and Security Hardening
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    # SSH Configuration
    ssh_port: 22
    ssh_permit_root_login: "prohibit-password"
    ssh_password_authentication: "no"
    ssh_permit_empty_passwords: "no"
    ssh_x11_forwarding: "no"
    ssh_max_auth_tries: 3
    ssh_client_alive_interval: 300
    ssh_client_alive_count_max: 2
    ssh_allow_tcp_forwarding: "yes"
    ssh_allow_agent_forwarding: "yes"
    ssh_gateway_ports: "no"
    
    # Firewall Configuration
    ufw_default_incoming: "deny"
    ufw_default_outgoing: "allow"
    ufw_default_forward: "deny"
    
    # Required firewall ports to open
    firewall_allowed_ports:
      - { port: "{{ ssh_port }}", proto: "tcp" }  # SSH
      - { port: "80", proto: "tcp" }              # HTTP
      - { port: "443", proto: "tcp" }             # HTTPS
    
    # Security packages to install
    security_packages:
      - fail2ban
      - ufw
      - unattended-upgrades
      - apt-listchanges
      - needrestart
      - logwatch
      - rkhunter
      - chkrootkit
    
    # Essential packages
    essential_packages:
      - curl
      - wget
      - vim
      - htop
      - tree
      - unzip
      - software-properties-common
      - ca-certificates
      - gnupg
      - lsb-release
    
    # Timezone
    server_timezone: "Europe/Amsterdam"
    
    # Automatic updates configuration
    auto_upgrades_enabled: true
    auto_reboot_enabled: false
    auto_reboot_time: "06:00"

  tasks:
    # ================================
    # SYSTEM UPDATES
    # ================================
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Perform full package upgrade
      apt:
        upgrade: dist
      register: full_upgrade_result

    - name: Remove unused packages (autoremove)
      apt:
        autoremove: yes
      register: autoremove_result

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Display reboot requirement status
      debug:
        msg: "Reboot is required for this host after setup completion"
      when: reboot_required_file.stat.exists

    # ================================
    # ESSENTIAL PACKAGES
    # ================================
    - name: Install essential packages
      apt:
        name: "{{ essential_packages }}"
        state: present
        update_cache: yes
      register: essential_packages_result

    - name: Install security packages
      apt:
        name: "{{ security_packages }}"
        state: present
      register: security_packages_result

    # ================================
    # TIMEZONE CONFIGURATION
    # ================================
    - name: Set timezone
      timezone:
        name: "{{ server_timezone }}"
      notify: restart rsyslog

    # ================================
    # SSH HARDENING
    # ================================
    - name: Backup original SSH config
      copy:
        src: /etc/ssh/sshd_config
        dest: /etc/ssh/sshd_config.backup
        remote_src: yes
        backup: yes
      run_once: true

    - name: Configure SSH daemon
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
        backup: yes
      with_items:
        - { regexp: '^#?Port', line: 'Port {{ ssh_port }}' }
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin {{ ssh_permit_root_login }}' }
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication {{ ssh_password_authentication }}' }
        - { regexp: '^#?PermitEmptyPasswords', line: 'PermitEmptyPasswords {{ ssh_permit_empty_passwords }}' }
        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding {{ ssh_x11_forwarding }}' }
        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries {{ ssh_max_auth_tries }}' }
        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval {{ ssh_client_alive_interval }}' }
        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax {{ ssh_client_alive_count_max }}' }
        - { regexp: '^#?Protocol', line: 'Protocol 2' }
        - { regexp: '^#?IgnoreRhosts', line: 'IgnoreRhosts yes' }
        - { regexp: '^#?HostbasedAuthentication', line: 'HostbasedAuthentication no' }
        - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
        - { regexp: '^#?UsePAM', line: 'UsePAM yes' }
        - { regexp: '^#?AllowTcpForwarding', line: 'AllowTcpForwarding {{ ssh_allow_tcp_forwarding }}' }
        - { regexp: '^#?AllowAgentForwarding', line: 'AllowAgentForwarding {{ ssh_allow_agent_forwarding }}' }
        - { regexp: '^#?GatewayPorts', line: 'GatewayPorts {{ ssh_gateway_ports }}' }
      notify: restart ssh

    - name: Create SSH privilege separation directory
      file:
        path: /run/sshd
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Validate SSH configuration
      command: sshd -t
      register: sshd_config_test
      failed_when: sshd_config_test.rc != 0

    # ================================
    # FIREWALL CONFIGURATION
    # ================================
    - name: Ensure UFW is installed
      apt:
        name: ufw
        state: present

    - name: Reset UFW to defaults
      command: ufw --force reset

    - name: Configure UFW defaults
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      with_items:
        - { direction: 'incoming', policy: '{{ ufw_default_incoming }}' }
        - { direction: 'outgoing', policy: '{{ ufw_default_outgoing }}' }
        - { direction: 'routed', policy: '{{ ufw_default_forward }}' }

    - name: Allow required ports through firewall
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      with_items: "{{ firewall_allowed_ports }}"

    - name: Enable UFW
      ufw:
        state: enabled

    # ================================
    # FAIL2BAN CONFIGURATION
    # ================================
    - name: Create fail2ban local configuration
      copy:
        content: |
          [DEFAULT]
          bantime = 3600
          findtime = 600
          maxretry = 3
          backend = systemd
          
          [sshd]
          enabled = true
          port = {{ ssh_port }}
          filter = sshd
          logpath = /var/log/auth.log
          maxretry = 3
          bantime = 3600
        dest: /etc/fail2ban/jail.local
        backup: yes
      notify: restart fail2ban

    # ================================
    # AUTOMATIC UPDATES
    # ================================
    - name: Configure unattended-upgrades
      copy:
        content: |
          Unattended-Upgrade::Allowed-Origins {
                  "${distro_id}:${distro_codename}";
                  "${distro_id}:${distro_codename}-security";
                  "${distro_id}ESMApps:${distro_codename}-apps-security";
                  "${distro_id}ESM:${distro_codename}-infra-security";
                  "${distro_id}:${distro_codename}-updates";
          };

          Unattended-Upgrade::Package-Blacklist {
          };

          Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
          Unattended-Upgrade::Remove-New-Unused-Dependencies "true";
          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Automatic-Reboot "{{ 'true' if auto_reboot_enabled else 'false' }}";
          Unattended-Upgrade::Automatic-Reboot-WithUsers "false";
          {% if auto_reboot_enabled %}
          Unattended-Upgrade::Automatic-Reboot-Time "{{ auto_reboot_time }}";
          {% endif %}
          Unattended-Upgrade::SyslogEnable "true";
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        backup: yes
      when: auto_upgrades_enabled
      notify: restart unattended-upgrades

    - name: Enable automatic updates
      copy:
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Unattended-Upgrade "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::AutocleanInterval "7";
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        backup: yes
      when: auto_upgrades_enabled

  handlers:
    - name: restart ssh
      service:
        name: ssh
        state: restarted

    - name: restart fail2ban
      service:
        name: fail2ban
        state: restarted

    - name: restart unattended-upgrades
      service:
        name: unattended-upgrades
        state: restarted

    - name: restart rsyslog
      service:
        name: rsyslog
        state: restarted