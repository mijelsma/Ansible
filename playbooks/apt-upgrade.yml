---
- name: Update and upgrade packages with security options
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    # Set to 'security' for security-only updates, 'full' for normal upgrade
    upgrade_type: "full"
    # Whether to autoremove unused packages after upgrade
    autoremove: true
    # Whether to reboot if required after upgrades
    reboot_if_required: false
  
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      register: apt_update_result
      
    - name: Display cache update status
      debug:
        msg: "APT cache updated successfully"
      when: apt_update_result is succeeded
      
    - name: Perform security-only upgrade (Ubuntu/Debian)
      apt:
        upgrade: safe
        default_release: "{{ ansible_distribution_release }}-security"
      when: 
        - upgrade_type == "security"
        - ansible_os_family == "Debian"
      register: security_upgrade_result
      
    - name: Perform full package upgrade
      apt:
        upgrade: dist
      when: upgrade_type == "full"
      register: full_upgrade_result
      
    - name: Show security upgrade results
      debug:
        msg: "Security upgrade completed. {{ security_upgrade_result.stdout_lines | length }} packages processed"
      when: 
        - upgrade_type == "security"
        - security_upgrade_result is defined
        - security_upgrade_result is succeeded
        
    - name: Show full upgrade results
      debug:
        msg: "Full upgrade completed. {{ full_upgrade_result.stdout_lines | length }} packages processed"
      when: 
        - upgrade_type == "full"
        - full_upgrade_result is defined
        - full_upgrade_result is succeeded
        
    - name: Remove unused packages (autoremove)
      apt:
        autoremove: yes
      when: autoremove | bool
      register: autoremove_result
      
    - name: Show autoremove results
      debug:
        msg: "Autoremove completed. Freed up space."
      when: 
        - autoremove | bool
        - autoremove_result is succeeded
        
    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      
    - name: Display reboot requirement status
      debug:
        msg: "Reboot is required for this host"
      when: reboot_required_file.stat.exists
      
    - name: Reboot the system if required and allowed
      reboot:
        msg: "Rebooting due to package updates"
        reboot_timeout: 300
        pre_reboot_delay: 30
      when: 
        - reboot_if_required | bool
        - reboot_required_file.stat.exists
      register: reboot_result
      
    - name: Wait for system to come back online after reboot
      wait_for_connection:
        timeout: 300
        delay: 30
      when: 
        - reboot_if_required | bool
        - reboot_result is defined
        - reboot_result is succeeded